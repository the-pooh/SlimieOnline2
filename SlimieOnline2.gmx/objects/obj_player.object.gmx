<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_slime</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///platform movement init
// I don't like GM's built in movement constants
// so these are our custom movement variables we will use
grav = 0;
vspd = 0;
hspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///platform movement
if !place_meeting(x,y+1,obj_block) &amp;&amp; (!place_meeting(x,y+1,obj_jumpthru) or place_meeting(x,y,obj_jumpthru)) // if we are in the air
{
    grav = .5; // set the gravity to .5
    vspd += grav; // add .5 to our vspd once every step
}
else // else if we are on the ground
{
    grav = 0; // set the gravity to 0
    vspd = 0; // set vspd to 0 to stop moving
    if keyboard_check_pressed(vk_up) // since we are on the ground, we can handle jumping here, so check if we pressed up
    {
        vspd = -8; // set the vspd to -8, which will make us jump
    }
}
if keyboard_check_released(vk_up) // if we released the up button while in the in air
{
    vspd *= .5; // divide our vspd by 2, creating a smooth type of variable jumping
}
if vspd &gt; 8 // we don't want to fall too fast, so lets limit our vspd
{
    vspd = 8; // note that if you want to be able to fall fast, you can remove this without affecting the code (but I wouldn't)
}
repeat(abs(vspd)) // we want to check for a collision every pixel, so we use a repeat() function to check every pixel while falling
{
    if sign(vspd) &lt; 0
    {
        if !place_meeting(x,y-1,obj_block)
        {
            y += sign(vspd);
        }
        else
        {
            vspd = 0;
        }
    }
    else 
    {
        if !place_meeting(x,y+1,obj_block) &amp;&amp; (!place_meeting(x,y+1,obj_jumpthru) or place_meeting(x,y,obj_jumpthru))
        {
            y += sign(vspd);
        }
    }
}
hspd = (keyboard_check(vk_right)-keyboard_check(vk_left))*4; // a nice little trick that will set our hspd to +4 or -4 depending what button we are holding
repeat(abs(hspd)) // same as the vspd, we want to check for a collision at every pixel we move
{
    if !place_meeting(x+sign(hspd),y,obj_block) // if there is no block to our left or right
    {
        x += sign(hspd); // add to our x value depending on which way we are going
    }
}

// So I handled the jumpthrough platform problem by seperating the positive and negative vspd values, and
// then I used the line (!place_meeting(x,y+1,obj_jumpthru) or place_meeting(x,y,obj_jumpthru))
// This checks if there isn't an obj_jumpthru below us, but makes sure we aren't inside one either
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
